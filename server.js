const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const PORT = process.env.PORT || 3000;
const GAME_URL = process.env.GAME_URL || 'https://jolly-druid-a73d54.netlify.app/';
const WEBHOOK_URL = process.env.RENDER_EXTERNAL_URL + '/webhook/' + BOT_TOKEN;

if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –ë–ï–ó polling
const bot = new TelegramBot(BOT_TOKEN);
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ WEBHOOK...');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
async function setupWebhook() {
    try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await bot.deleteWebHook();
        console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        const webhookSet = await bot.setWebHook(WEBHOOK_URL);
        console.log('üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookSet);
        console.log('üì° Webhook URL:', WEBHOOK_URL);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
        const webhookInfo = await bot.getWebHookInfo();
        console.log('‚úÖ Webhook —Å—Ç–∞—Ç—É—Å:', webhookInfo);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
    }
}

// Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
app.post('/webhook/' + BOT_TOKEN, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.on('message', (msg) => {
    if (msg.text === '/start') {
        const chatId = msg.chat.id;
        const userName = msg.from.first_name || '–î—Ä—É–≥';
        
        bot.sendMessage(chatId, 'üéØ **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?**

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' + userName + '! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! :)

–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–¥–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞—à–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.

–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞—á–∞—Ç—å" –∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –Ω–µ–±–æ–ª—å—à—É—é –∏–≥—Ä—É! 

üéÆ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?', {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', web_app: {url: GAME_URL}}
                    ],
                    [
                        {text: 'üí° –ü–æ–º–æ—â—å', callback_data: 'help'},
                        {text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance'}
                    ],
                    [
                        {text: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support'}
                    ]
                ]
            }
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    // –£–±–∏—Ä–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫–∞" —Å –∫–Ω–æ–ø–∫–∏
    bot.answerCallbackQuery(callbackQuery.id);
    
    switch(data) {
        case 'help':
            sendHelpMessage(chatId);
            break;
            
        case 'balance':
            bot.sendMessage(chatId, 'üí∞ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞**

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É
2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã
3Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

üéØ –ò–≥—Ä–∞–π—Ç–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!', {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                        {text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', web_app: {url: GAME_URL}}
                    ]]
                }
            });
            break;
            
        case 'support':
            bot.sendMessage(chatId, 'üÜò **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**

üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
‚Ä¢ Email: support@club.com
‚Ä¢ –í—Ä–µ–º—è: –ü–Ω-–ü—Ç 9:00-18:00

‚ùì **–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
‚Ä¢ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
‚Ä¢ –ù–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–æ–Ω—É—Å—ã? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
‚Ä¢ –ò–≥—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è? –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞

üí¨ **–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –∑–¥–µ—Å—å!**', {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                        {text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É', web_app: {url: GAME_URL}}
                    ]]
                }
            });
            break;
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
function sendHelpMessage(chatId) {
    bot.sendMessage(chatId, 'üéØ **–ü–†–ê–í–ò–õ–ê –ò–ì–†–´**

üìù **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
üî∏ –£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫
üî∏ –¶–≤–µ—Ç–∞ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç:
  üü¢ **–ó–µ–ª–µ–Ω—ã–π** - –±—É–∫–≤–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
  üü° **–ñ–µ–ª—Ç—ã–π** - –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –Ω–µ —Ç–∞–º
  ‚ö´ **–°–µ—Ä—ã–π** - –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ

üí∞ **–ë–æ–Ω—É—Å—ã:**
üèÜ **–ü–æ–±–µ–¥–∞:** +50 –±–æ–Ω—É—Å–æ–≤
üéØ **–£—á–∞—Å—Ç–∏–µ:** +10 –±–æ–Ω—É—Å–æ–≤
üíé **–¢—Ä–∞—Ç—å—Ç–µ –±–æ–Ω—É—Å—ã –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ!**

üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∫–ª—É–±–∞
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [
                    {text: 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å!', web_app: {url: GAME_URL}}
                ],
                [
                    {text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance'}
                ]
            ]
        }
    });
}

// API –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.post('/api/auth', async (req, res) => {
    try {
        const { card_number, birth_date, telegram_user_id } = req.body;
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', { card_number, telegram_user_id });

        if (card_number && birth_date) {
            res.json({
                success: true,
                user: {
                    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    balance: 125.50,
                    card_number: card_number
                }
            });
        } else {
            res.status(400).json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã'
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ò–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
app.post('/api/game-events', async (req, res) => {
    try {
        const eventData = req.body;
        console.log('üéÆ –ò–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:', eventData);
        res.json({ success: true, message: '–°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–±—ã—Ç–∏—è:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' });
    }
});

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        bot_status: 'webhook',
        webhook_url: WEBHOOK_URL
    });
});

app.get('/', (req, res) => {
    res.json({ 
        message: 'Wordly Telegram Bot Server',
        status: 'running',
        mode: 'webhook',
        endpoints: ['/health', '/api/auth', '/api/game-events']
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ' + PORT);
    console.log('üéÆ Game URL: ' + GAME_URL);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await setupWebhook();
    console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ webhook');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection:', reason);
});

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...');
    try {
        await bot.deleteWebHook();
        console.log('üóëÔ∏è Webhook —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error);
    }
    process.exit(0);
});
